services:
  postgresdb:
    image: postgres:17.4-alpine
    container_name: postgresdb
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "6432:5432"
    networks:
      - mynetwork

  broker:
    image: apache/kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1
    networks:
      - mynetwork

  backend:
    build:
      context: ./Backend/remusic-back/
      dockerfile: Dockerfile
    image: backend
    container_name: backend
    ports:
      - "8080:8080"
    volumes:
      - ./remusic/static:/app/remusic/static
    networks:
      - mynetwork
    depends_on:
      - postgresdb

  frontend:
    build:
      context: ./Frontend/remusic-front/
      dockerfile: Dockerfile
    image: frontend
    container_name: frontend
    ports:
      - "5173:80"
    networks:
      - mynetwork
    depends_on:
      - backend

  conversion:
    build:
      context: ./Music Converter Microservice/remusic-conversion/
      dockerfile: Dockerfile
    image: conversion
    container_name: conversion
    ports:
      - "8060:8060"
    volumes:
      - ./remusic/temp:/app/temp
    networks:
      - mynetwork
    depends_on:
      - broker

networks:
  mynetwork:
